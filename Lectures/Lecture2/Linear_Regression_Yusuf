{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 258,
   "id": "eea909a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c6d5dac",
   "metadata": {},
   "source": [
    "<h1> Simple Linear Regression </h1>\n",
    "\n",
    "Linear approach to modelling the relationship between a response variable and one or more explanatory variables.\n",
    "\n",
    "In Simple Linear Regression we have one explanatory variable (e.g. using height to predict weight).\n",
    "\n",
    "Our aim is to find a linear function which predicts the response variable as a function of the explanatory variables.\n",
    "\n",
    "To do so we make use of something called the ordinary least squares method (OLS). Essentially the accuracy of each prediction is measures by its squared residual (residual being the vertical distance between the fitted line and the true data point). With our goal to be minimising the sum of the squared residuals (SSR).\n",
    "\n",
    "Function for a linear regression model:\n",
    "\n",
    "$$ y=\\alpha +\\beta x $$\n",
    "\n",
    "However, we have errors in this as the general relationship may not hold exaclty for the entire population of values of x (explanatory) and y (response). Essentially we cannot model any random process perfectly so we must account for this in our model. So we use the function:\n",
    "\n",
    "$$  y_i = \\alpha + \\beta x_i + \\varepsilon_i $$\n",
    "\n",
    "This is a linear regression model.\n",
    "\n",
    "The crux of this problem is given n data pairs (x_i, y_i) how can we estimate alpha and beta and this is where the error term comes in, the formula for the error term of any data pair is:\n",
    "\n",
    "$$ {\\displaystyle {\\widehat {\\varepsilon }}_{i}=y_{i}-\\alpha -\\beta x_{i}.} $$ \n",
    "\n",
    "(hat means an estimation)\n",
    "\n",
    "Therefore the sum of squared residuals and our problem end up being:\n",
    "\n",
    "$$ {\\displaystyle {\\text{Find }}\\min _{\\alpha ,\\,\\beta }Q(\\alpha ,\\beta ),\\quad {\\text{for }}Q(\\alpha ,\\beta )=\\sum _{i=1}^{n}{\\widehat {\\varepsilon }}_{i}^{\\,2}=\\sum _{i=1}^{n}(y_{i}-\\alpha -\\beta x_{i})^{2}\\ .}$$\n",
    "\n",
    "<h3>There are 2 ways to get an estimate of alpha and beta. The first is with an analytical approach and the second in with an iterative approach. We go over the analytic approach first</h3>\n",
    "\n",
    "With some rearranging we get:\n",
    "\n",
    "$${\\textstyle {\\begin{aligned}{\\widehat {\\alpha }}&={\\bar {y}}-({\\widehat {\\beta }}\\,{\\bar {x}}),\\\\[5pt]{\\widehat {\\beta }}&={\\frac {\\sum _{i=1}^{n}(x_{i}-{\\bar {x}})(y_{i}-{\\bar {y}})}{\\sum _{i=1}^{n}(x_{i}-{\\bar {x}})^{2}}}\\\\[6pt]\\end{aligned}}}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "id": "b5286d7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Calculating alphahat and betahat using the analytical approach\n",
    "x = np.array([1.47,1.50, 1.52, 1.55, 1.57, 1.60, 1.63, 1.65,\n",
    "             1.68, 1.70, 1.73, 1.75, 1.78, 1.80, 1.83])\n",
    "y = np.array([52.21, 53.12, 54.48, 55.84, 57.20, 58.57, 59.93, 61.29,\n",
    "              63.11, 64.47, 66.28, 68.10, 69.92, 72.19, 74.46])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "404c4f91",
   "metadata": {},
   "source": [
    "We need to solve the following equations to estimate beta and alpha hat\n",
    "\n",
    "$${\\textstyle {\\begin{aligned}{\\widehat {\\alpha }}&={\\bar {y}}-({\\widehat {\\beta }}\\,{\\bar {x}}),\\\\[5pt]{\\widehat {\\beta }}&={\\frac {\\sum _{i=1}^{n}(x_{i}-{\\bar {x}})(y_{i}-{\\bar {y}})}{\\sum _{i=1}^{n}(x_{i}-{\\bar {x}})^{2}}}\\\\[6pt]\\end{aligned}}}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "id": "cb6923b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7.490558403882604"
      ]
     },
     "execution_count": 302,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xbar = x.mean()\n",
    "ybar = y.mean()\n",
    "\n",
    "# beta hat\n",
    "sum_numerator = 0\n",
    "sum_denominator = 0\n",
    "\n",
    "for xi, yi in zip(x, y):\n",
    "    sum_numerator += (xi - xbar) * (yi - ybar)\n",
    "    sum_denominator += (xi-xbar) ** 2\n",
    "\n",
    "betahat = sum_numerator / sum_denominator\n",
    "\n",
    "# alpha hat\n",
    "alphahat = ybar - (betahat*xbar)\n",
    "\n",
    "SSR = sum((y - (alphahat + betahat*x))**2)\n",
    "SSR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "id": "cf835d14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-39.06195591884392, 61.272186542110624)"
      ]
     },
     "execution_count": 303,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alphahat, betahat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "id": "6ae242e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([1.8, 1.6, 1.5]), array([71.22797986, 58.97354255, 52.84632389]))"
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A simple example of how we could use the alphahat and betahat\n",
    "# Bear in mind this is not purely accurate to model new data with a model it must be organised in the same way\n",
    "# as the training data. Meaning it must have the same distribution\n",
    "def pred(xs, alphahat, betahat):\n",
    "    y_preds = alphahat + betahat * xs\n",
    "    \n",
    "    return y_preds\n",
    "\n",
    "# Demo what the consqeuence of unseen data is\n",
    "# new_heights = np.array([1.8, 1.6, 1.5, 2, 1.3])\n",
    "new_heights = np.array([1.8, 1.6, 1.5])\n",
    "y_preds = pred(new_heights, alphahat, betahat)\n",
    "\n",
    "new_heights, y_preds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "213d105a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a scatter plot of the data points\n",
    "plt.scatter(x, y, color='blue', label='Data Points')\n",
    "\n",
    "# Generate values for the regression line\n",
    "x_values = np.linspace(min(x), max(x), 100)\n",
    "y_values = betahat * x_values + alphahat\n",
    "\n",
    "# Plot the regression line\n",
    "plt.plot(x_values, y_values, color='red', label='Regression Line')\n",
    "\n",
    "# Add the predicted points\n",
    "plt.scatter(new_heights, y_preds, color='green', label='Predicted Weights', marker='x')\n",
    "\n",
    "# Label the axes and add a title\n",
    "plt.xlabel('Height (meters)')\n",
    "plt.ylabel('Weight (kilograms)')\n",
    "plt.title('Simple Linear Regression: Height vs Weight')\n",
    "\n",
    "# Add a legend\n",
    "plt.legend()\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d17a4012",
   "metadata": {},
   "source": [
    "Above we described the analytical approach to estimate alphahat and betahat, now we cover the second approach the iterative approach.\n",
    "\n",
    "In this approach we use gradient descent to get the values of alphahat and betahat which minimise the SSR. To do so we must first calculate the partial derivatives for SSR w.r.t alpha and beta. Doing this we get the equations:\n",
    "\n",
    "$$\\frac{\\partial \\text{RSS}}{\\partial \\alpha} = -2 \\sum_{i=1}^{n} (y_i - (\\beta x_i + \\alpha))$$\n",
    "\n",
    "$$ \\frac{\\partial \\text{RSS}}{\\partial \\beta} = -2 \\sum_{i=1}^{n} x_i (y_i - (\\beta x_i + \\alpha)) $$\n",
    "\n",
    "Using these we can iteratively update the alphahat and betahat for n iterations.\n",
    "\n",
    "To implement this we must have a loop for n iterations and perform gradient descent on each variable alphahat and betahat. This means we must minimise the value of SSR, to do so we calculate the value of both derivatives given each partial derivative and then we bump the value of alphahat and betahat in the opposite direction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "id": "1ade4403",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.3278817264294583e-08\n"
     ]
    }
   ],
   "source": [
    "# The iterative approach using gradient descent\n",
    "\n",
    "alphahat = 0\n",
    "betahat = 0\n",
    "\n",
    "iterations = 10000\n",
    "learning_rate = 0.01\n",
    "\n",
    "for i in range(iterations):\n",
    "    y_preds = alphahat + betahat * x\n",
    "    \n",
    "    # Because we are using numpy arrays the y - y_preds will operate element wise we could use for loops to \n",
    "    # do the same thing here\n",
    "    d_alpha = -2 * sum(y - y_preds)\n",
    "    d_beta = -2 * sum(x * (y - y_preds))\n",
    "    \n",
    "    #update alpha and beta\n",
    "    alphahat -= learning_rate * d_alpha\n",
    "    betahat -=learning_rate * d_beta\n",
    "\n",
    "print(sum(y - y_preds)**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "id": "ab087a14",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.030514794617892832, 0.018426040786150507)"
      ]
     },
     "execution_count": 316,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alphahat, betahat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "id": "e0f10713",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Code to show the gradient descent in action\n",
    "def plot_gradual_updates(x, y, learning_rate=0.1, iterations=[10, 100, 1000, 5000, 10000], pause_duration=1):\n",
    "    n = len(y)\n",
    "    alphahat, betahat = 0, 0  # Initialize alpha and beta\n",
    "\n",
    "    plt.figure(figsize=(12, 8))\n",
    "\n",
    "    max_iter = max(iterations)\n",
    "    iteration_steps = set(iterations)\n",
    "\n",
    "    for iteration in range(max_iter + 1):\n",
    "        y_pred = alphahat + betahat * x\n",
    "\n",
    "        # Calculate gradients\n",
    "        d_alpha = (-2/n) * sum(y - y_pred)\n",
    "        d_beta = (-2/n) * sum(x * (y - y_pred))\n",
    "\n",
    "        # Update alpha and beta\n",
    "        alphahat -= learning_rate * d_alpha\n",
    "        betahat -= learning_rate * d_beta\n",
    "\n",
    "        if iteration in iteration_steps:\n",
    "            # Clear the previous plot and plot the new line and data points\n",
    "            clear_output(wait=True)\n",
    "            plt.scatter(x, y, color='blue', label='Data points' if iteration == 0 else \"\")\n",
    "            plt.plot(x, y_pred, color='red', label=f'Iteration {iteration}')\n",
    "            plt.xlabel('height')\n",
    "            plt.ylabel('weight')\n",
    "            plt.title('Gradual Updates in Gradient Descent')\n",
    "            plt.legend()\n",
    "            plt.show()\n",
    "            plt.pause(pause_duration)\n",
    "\n",
    "# Call the function for gradual updates\n",
    "plot_gradual_updates(x, y, pause_duration=2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "id": "afc58643",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.2</td>\n",
       "      <td>39344.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.4</td>\n",
       "      <td>46206.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.6</td>\n",
       "      <td>37732.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.1</td>\n",
       "      <td>43526.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.3</td>\n",
       "      <td>39892.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YearsExperience   Salary\n",
       "0              1.2  39344.0\n",
       "1              1.4  46206.0\n",
       "2              1.6  37732.0\n",
       "3              2.1  43526.0\n",
       "4              2.3  39892.0"
      ]
     },
     "execution_count": 268,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Continue using the height vs weight and demo on this at the end if time allows\n",
    "\n",
    "salary_data = pd.read_csv('/Users/moose/Documents/PyCharm_Projects/Karpathy_NN_course/Salary_dataset.csv')\n",
    "salary_data.drop('Unnamed: 0', axis=1, inplace=True)\n",
    "salary_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "id": "18b49563",
   "metadata": {},
   "outputs": [],
   "source": [
    "# function for analytical simple LR\n",
    "\n",
    "def analytic_approach_simple_LR(x, y):\n",
    "    xbar = x.mean()\n",
    "    ybar = y.mean()\n",
    "\n",
    "    # beta hat\n",
    "    sum_numerator = 0\n",
    "    sum_denominator = 0\n",
    "\n",
    "    for xi, yi in zip(x, y):\n",
    "        sum_numerator += (xi - xbar) * (yi - ybar)\n",
    "        sum_denominator += (xi-xbar) ** 2\n",
    "\n",
    "    betahat = sum_numerator / sum_denominator\n",
    "\n",
    "    # alpha hat\n",
    "    alphahat = ybar - (betahat*xbar)\n",
    "    \n",
    "    return alphahat, betahat\n",
    "\n",
    "def iterative_approach_simple_LR(x, y):\n",
    "    # The iterative approach using gradient descent\n",
    "\n",
    "    alphahat = 0\n",
    "    betahat = 0\n",
    "\n",
    "    iterations = 10000\n",
    "    learning_rate = 0.0001\n",
    "\n",
    "    for i in range(iterations):\n",
    "        y_preds = alphahat + betahat * x\n",
    "\n",
    "        # Because we are using numpy arrays the y - y_preds will operate element wise we could use for loops to \n",
    "        # do the same thing here\n",
    "        d_alpha = -2 * sum(y - y_preds)\n",
    "        d_beta = -2 * sum(x * (y - y_preds))\n",
    "    \n",
    "        #update alpha and beta\n",
    "        alphahat -= learning_rate * d_alpha\n",
    "        betahat -=learning_rate * d_beta\n",
    "    \n",
    "    return alphahat, betahat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "id": "191bc958",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.array(salary_data['YearsExperience'])\n",
    "y = np.array(salary_data['Salary'])\n",
    "\n",
    "analytical_alphahat, analytical_betahat = analytic_approach_simple_LR(x, y)\n",
    "\n",
    "iterative_alphahat, iterative_betahat = iterative_approach_simple_LR(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "id": "2ddcaa93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(24848.203966523193, 9449.962321455077)"
      ]
     },
     "execution_count": 271,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "analytical_alphahat, analytical_betahat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "id": "1121a15d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(24848.103291551266, 9449.977097229259)"
      ]
     },
     "execution_count": 272,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "iterative_alphahat, iterative_betahat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "id": "e4398413",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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I0eOZNiwYagqa9asoXXr1jRp0oQmTZrw7bffAtCnTx9mzZpFamoqQ4YMibhdNK1bt2blypVs27aNyy+/nIYNG9KyZUsWLlwIwGuvvUavXr0AN23/nXfeyRlnnEGtWrUOT+EfGseSJUto0aLF4et0VqxYEd8PyJh8pF+/8FO1vHL/T3D22XDHHa7zfvFi6NXLl/VafBcp8xS2W25rMFF/jeRCcK0i4JhjjtHffvtNd+/erXv37lVV1eXLl2vgPYTWHCJtF+lcBw8e1A4dOujw4cO1V69eOmDAAFVVnT59ujZq1EhVVV999VW9/fbbVVW1a9euevXVV2t6erouWbJE//GPf4SNo1evXjre+0D279+ve/bsydmHkgNWgzF5jUjm74tiHNC+DNR9FFetUEF1zBhVb1aOvIwoNRibTTlOIv0a6dcv/uPM3d8UDh48SK9evZg/fz5FixZl+fLlYbePdbvA0gDgajDdu3fn9NNPPzx55nnnncfWrVvZsWPHEftefvnlFClShLp16x5eDCxUq1atGDhwIBs2bODKK6+kTp062X3rxhQY1au7LhaAVH7kFW6kMfP5oHRH2i8d6kaK5XP5sM6VN0WaIC6uE8cBq1atomjRohx33HEMGTKEKlWqsGDBAtLS0jhw4EDYfWLdLrA0wPz583n++ecpXrz44WQWLDBtfrDAlPwQefr+a6+9lqlTp1KqVCnatWvHF198EctbNqZAGjgQKpbay//oy/c053h+o1PxKewY+WaBSC5gCSZuIk0EEM8JArZs2cItt9xCr169EBF27NjBCSecQJEiRRg3bhzp6W7gXbly5TItuhVpu1icffbZTPA6k7788ksqV658xIJjkYTGsWrVKmrVqsWdd95Jhw4dDvfnGFMYda7xNavLp9KXJxhLV9pVW8qlr1zh65X1iWYJJk4GDvRn4rhAs1W9evW44IILaNu2Lf379wfgtttuY8yYMbRs2ZLly5cfXlCsYcOGFCtWjEaNGjFkyJCI28ViwIABh6fD79OnD2PGjIl539A43njjDerXr09qaio//fQTXbp0yd6HYUyM/B5wkyu7drlO+9atObrkAfjsM27U0SxcX6FAJRfAOvkDt3gMUx4/3k11LeLuc9vBb+LHOvkLD78G3MTFxx+rVq/uviR691bdtSvZEeUaNkw5MTp3dpOaZmS4+wL3a8SY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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a scatter plot of the data points\n",
    "plt.scatter(x, y, color='blue', label='Data Points')\n",
    "\n",
    "# Generate values for the regression line\n",
    "x_values = np.linspace(min(x), max(x), 100)\n",
    "y_values = analytical_betahat * x_values + analytical_alphahat\n",
    "\n",
    "# Plot the regression line\n",
    "plt.plot(x_values, y_values, color='red', label='Regression Line')\n",
    "\n",
    "# Label the axes and add a title\n",
    "plt.xlabel('Years of Experience')\n",
    "plt.ylabel('Salary in Dollars')\n",
    "plt.title('Simple Linear Regression: Height vs Weight')\n",
    "\n",
    "# Add a legend\n",
    "plt.legend()\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "id": "8a4e34b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a scatter plot of the data points\n",
    "plt.scatter(x, y, color='blue', label='Data Points')\n",
    "\n",
    "# Generate values for the regression line\n",
    "x_values = np.linspace(min(x), max(x), 100)\n",
    "y_values = iterative_betahat * x_values + iterative_alphahat\n",
    "\n",
    "# Plot the regression line\n",
    "plt.plot(x_values, y_values, color='red', label='Regression Line')\n",
    "\n",
    "# Label the axes and add a title\n",
    "plt.xlabel('Years of Experience')\n",
    "plt.ylabel('Salary in Dollars')\n",
    "plt.title('Simple Linear Regression: Height vs Weight')\n",
    "\n",
    "# Add a legend\n",
    "plt.legend()\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
